<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:component-scan
		base-package="com.beisi.shiro">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter type="annotation"
			expression="org.springframework.web.bind.annotation.ControllerAdvice" />
	</context:component-scan>

	<!-- 数据库配置文件 -->
	<context:property-placeholder
		location="classpath:jdbc.properties" />
	<!-- 配置C3P0数据连接池 c3p0存在安全漏洞，所以换用阿里的druid -->
	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"> 
		<property name="user" value="${jdbc.user}"></property> <property name="password" 
		value="${jdbc.password}"></property> <property name="driverClass" value="${jdbc.driverClass}"></property> 
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property> <property name="acquireIncrement" 
		value="${jdbc.acquireIncrement}"></property> <property name="initialPoolSize" 
		value="${jdbc.initialPoolSize}"></property> <property name="minPoolSize" 
		value="${jdbc.minPoolSize}"></property> <property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property> 
		<property name="maxStatements" value="${jdbc.maxStatements}"></property> 
		<property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}"></property> 
		</bean> -->

	<!--配置druid连接池 -->
	<bean id="dataSource"
		class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="driverClassName" value="${jdbc.driverClass}"></property>
		<property name="url" value="${jdbc.jdbcUrl}"></property>
		<property name="username" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis"
			value="300000" />

		<property name="testWhileIdle" value="true" />

		<!-- 这里建议配置为TRUE，防止取到的连接不可用 -->
		<property name="testOnBorrow" value="true" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="true" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 这里配置提交方式，默认就是TRUE，可以不用配置 -->
		<property name="defaultAutoCommit" value="true" />


		<!-- 验证连接有效与否的SQL，不同的数据配置不同 -->
		<!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->
		<property name="validationQuery" value="select 1 " />
		<property name="filters" value="stat" />
		<property name="proxyFilters">
			<list>
				<ref bean="logFilter" />
			</list>
		</property>
	</bean>
	<bean id="logFilter"
		class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
		<property name="statementExecutableSqlLogEnable"
			value="false" />
	</bean>

	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>

	<!-- 配置事务属性 -->
	<tx:advice id="txAdvice"
		transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="load*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="select*" read-only="true" />
			<tx:method name="*" read-only="false" />
		</tx:attributes>
	</tx:advice>

	<!-- 配置事务的切入点 -->
	<aop:config>
		<aop:pointcut
			expression="execution(* com.beisi.shiro.service.*.impl.*.*(..))"
			id="txPointcut" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="txPointcut" />
	</aop:config>

	<!-- 整合Mybatis -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property>
		<property name="mapperLocations"
			value="classpath:com/beisi/shiro/dao/mapper/**/*.xml"></property>
	</bean>
	<!-- mybatis接口扫描 -->
	<mybatis-spring:scan
		base-package="com.beisi.shiro.dao" />

	<!-- shiro的核心组件：securityManager -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 配置缓存 -->
		<property name="cacheManager" ref="cacheManager" />
		<!-- 多realm认证策略必须放在多realm配置之前 -->
		<property name="authenticator" ref="authenticator"></property>
		<!-- 配置域realm，用户名，密码，角色都保存在域里，后面要细讲，这是配置单个realm的配置方法 -->
		<!-- <property name="realm" ref="shiroRealm" /> -->
		<!-- 这是多个realm的配置方法 ，会根据配置顺序依次验证 -->
		<property name="realms">
			<list>
				<ref bean="shiroRealm" />
		<!-- 		<ref bean="qQRealm" />
				<ref bean="weixinRealm" /> -->
			</list>
		</property>
	</bean>
	<!-- 设置多realm认证策略 -->
 	<bean id="authenticator"
		class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
		</property>
		<!--  ###可以在这里注入多realm，但一般不放在此处，因为做授权时，会在核心组件中(securityManager)获取realms <property 
			name="realms"> <list> <ref bean="shiroRealm"/> <ref bean="qQRealm"/> <ref 
			bean="weixinRealm"/> </list> </property>###-->
	</bean> 

	<!-- 加载ehcache全局配置文件 -->
	<bean id="cacheManager"
		class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile"
			value="classpath:ehcache.xml"></property>
	</bean>
	<!-- shiro配置密码比对计算算法 -->
	<bean id="shiroRealm"
		class="com.beisi.shiro.service.shiro.ShiroRealm">
		<property name="credentialsMatcher">
			<!-- <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"> 
				使用shiro的验证机制 使用加密算法名 <property name="hashAlgorithmName" value="MD5"></property> 
				加密次数 <property name="hashIterations" value="1024"></property> 加密结果设为16进制 
				<property name="storedCredentialsHexEncoded" value="true"></property> </bean> -->
			<bean class="com.beisi.shiro.service.shiro.MyCredentialsMatcher"><!-- 使用自定义验证机制 -->
			</bean>
		</property>
	</bean>
<!-- 	
	<bean id="qQRealm" class="com.beisi.shiro.service.shiro.QQRealm">
		<property name="credentialsMatcher">
			<bean
				class="com.beisi.shiro.service.shiro.MyQQCredentialsMatcher">使用自定义验证机制
			</bean>
		</property>
	</bean>
	<bean id="weixinRealm"
		class="com.beisi.shiro.service.shiro.WeixinRealm">
		<property name="credentialsMatcher">
			<bean
				class="com.beisi.shiro.service.shiro.MyWeiXinCredentialsMatcher">使用自定义验证机制
			</bean>
		</property>
	</bean>
	 -->


	<!-- shiro的拦截规则 -->
	<!-- 需要注意的知识点，id必须是web.xml中filter中的shiro名字 -->
	<bean id="shiroFilter"
		class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login.html" />  <!--登陆的页面，没有登录情况下访问需要登录后的页面，会自动返回带这个页面 -->
		<!-- 登录页面，filterChainDefinitions除没有指定的页面，或者指定权限是anon以外的所有页面，在没登录时候访问都会自动跳转到这里 -->
		<property name="successUrl" value="/admin/main.html" />  <!-- 登录成功后的页面 -->
		<property name="unauthorizedUrl" value="/unauthorized.html" />  <!-- 登录后访问登录用户没有权限的页面后跳转的页面 -->
		<!-- 可以通过注解的方式在开发中注入权限，但很少这样做，会导致一些不灵活错误，放在spring.xml修改也不方便，所以放在数据库中初始化，放在数据表中，可在后台界面，实现数据库增删改进行修改 -->
		<!-- <property name="filterChainDefinitions"> 设置拦截规则的属性 注意点：规则是有顺序的，从上到下，拦截的范围，必须是从小到大 
			<value> URL地址 = 拦截地址 /favicon.ico = anon /login.html = anon /logout.html 
			= logout 登出过滤器 /admin/userlist.html = perms[userlist] 根据权限拦截 /admin/adduser.html 
			= perms[adduser] 根据权限拦截 /admin/userlist.html = roles[user] 当前登录用户必须有user这个权限才可以访问 
			/admin/adduser.html = roles[admin] 当前登录用户必须有admin这个权限才可以访问 /admin/** = authc 
			authc表示要登录后，才能访问 /** = anon anon表示匿名访问，就是不用登录 </value> </property> -->
		<property name="filterChainDefinitionMap"
			ref="filterChainDefinitionMap"></property>
	</bean>

	<bean id="filterChainDefinitionMap"
		factory-bean="filterChainDefinitionMapFactory"
		factory-method="getFilterChainDefinitionMap"></bean>
	<bean id="filterChainDefinitionMapFactory"
		class="com.beisi.shiro.service.shiro.FilterChainDefinitionMapFactory"></bean>
</beans>
