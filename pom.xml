<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.beisi</groupId>
	<artifactId>shiro</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>shiro</name>
	<url>http://maven.apache.org</url>
	<properties>
		<project.build.encoding>UTF-8</project.build.encoding>
		<jdk.version>1.8</jdk.version>
		<junit.version>4.12</junit.version>
		<commons.lang.version>2.6</commons.lang.version>
		<commons.io.version>2.6</commons.io.version>
		<!-- <spring.version>4.3.18.RELEASE</spring.version> -->
		<spring.version>5.0.7.RELEASE</spring.version>
		<mysql.version>5.1.46</mysql.version>
		<mybatis.version>3.4.6</mybatis.version>
		<mybatis.spring.version>1.3.2</mybatis.spring.version><!-- 不同版本Spring存在版本兼容 -->
		<druid.version>1.1.10</druid.version>
		<shiro.version>1.3.2</shiro.version>

		<slf4j.version>1.7.25</slf4j.version>
		<log4j.version>2.8.2</log4j.version>
		<fastjson.version>1.2.54</fastjson.version>
		<jackson.version>2.9.10.4</jackson.version>
		<!-- <quartz.version>2.2.3</quartz.version> -->
		<quartz.version>2.3.0</quartz.version>
	</properties>
	<dependencies>
	<!-- https://mvnrepository.com/artifact/org.apache.poi/poi -->
<dependency>
    <groupId>org.apache.poi</groupId>
    <artifactId>poi</artifactId>
    <version>3.17</version>
</dependency>
	
		<!-- =======================Base================================= -->
		<!-- Junit单元测试依赖 -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- servlet、jsp 基础依赖 -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>javax.servlet-api</artifactId>
			<version>3.0.1</version><!-- 3.1.0版本会导致xss工具类错误 -->
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.2</version>
			<scope>provided</scope>
		</dependency>
		<!-- jstl -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	<!-- =======================Apache commonss================================= -->
		<dependency>
		    <groupId>commons-lang</groupId>
		    <artifactId>commons-lang</artifactId>
		    <version>${commons.lang.version}</version>
		</dependency>
		
		<dependency>
		    <groupId>commons-io</groupId>
		    <artifactId>commons-io</artifactId>
		    <version>${commons.io.version}</version>
		</dependency>
		<!-- =======================Spring================================= -->

		<!-- 添加Spring依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
			<!--排除依赖 -->
			<!-- <exclusions> <exclusion> <groupId>commons-logging</groupId> <artifactId>commons-logging</artifactId> 
				</exclusion> </exclusions> -->
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aop</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-aspects</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-expression</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context-support</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-oxm</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>${spring.version}</version>
		</dependency>
		
		<!-- =======================Database================================= -->

		<!-- Mybatis核心包 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis</artifactId>
			<version>${mybatis.version}</version>
		</dependency>

		<!-- mybatis/spring包 -->
		<dependency>
			<groupId>org.mybatis</groupId>
			<artifactId>mybatis-spring</artifactId>
			<version>${mybatis.spring.version}</version>
		</dependency>

		<!-- mysql数据库jdbc驱动 -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>${mysql.version}</version>
		</dependency>

		<!-- 阿里Druid数据源 -->
		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>druid</artifactId>
			<version>${druid.version}</version>
		</dependency>
		
		<!-- ===========================Log============================= -->

<!-- spring5已废弃
		添加SLF4J接口依赖
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>

		添加log4j依赖，真正实现日志输出
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>${log4j.version}</version>
		</dependency>

		添加SLF4J-Log4j依赖，用于将对SLF4J接口的调用转接到具体的日志系统log4j
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		 -->
		 <!-- slf4j日志包 -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<!--Log4j -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>2.8.2</version>
		</dependency>
		<!-- log4j-core -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<!-- log4j-web -->
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-web</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		 
		<!-- ===========================Shiro============================= -->

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-core</artifactId>
			<version>${shiro.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-web</artifactId>
			<version>${shiro.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-ehcache</artifactId>
			<version>${shiro.version}</version>
		</dependency>

		<dependency>
			<groupId>org.apache.shiro</groupId>
			<artifactId>shiro-spring</artifactId>
			<version>${shiro.version}</version>
		</dependency>
		
		<!-- <dependency>  
		     <groupId>org.apache.shiro</groupId>  
		     <artifactId>shiro-quartz</artifactId>  
		     <version>${shiro.version}</version>  
		</dependency> -->
			
		
		<!-- ==========================quartz============================ -->
		
		<dependency>
		    <groupId>org.quartz-scheduler</groupId>
		    <artifactId>quartz</artifactId>
		    <version>${quartz.version}</version>
		    <exclusions>
		    	<exclusion>
		    		<artifactId>c3p0</artifactId>
		    		<groupId>c3p0</groupId>
		    	</exclusion>
		    </exclusions>
		</dependency>
		<!-- 工具 -->
		<dependency>
			<groupId>org.quartz-scheduler</groupId>
			<artifactId>quartz-jobs</artifactId>
			<version>${quartz.version}</version>
		</dependency>
		
				<!-- ===========================Tool============================= -->

		<dependency>
			<groupId>com.alibaba</groupId>
			<artifactId>fastjson</artifactId>
			<version>${fastjson.version}</version>
		</dependency>

		<dependency>
			<groupId>com.fasterxml.jackson.core</groupId>
			<artifactId>jackson-databind</artifactId>
			<version>${jackson.version}</version>
		</dependency>
		
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.11</version>
		</dependency>
				<!-- JSON工具包 -->
		<dependency>
			<groupId>net.sf.json-lib</groupId>
			<artifactId>json-lib</artifactId>
			<version>2.4</version>
			<classifier>jdk15</classifier>
		</dependency>
		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<version>1.1.1</version>
		</dependency>
		<!-- ===========================Util============================= -->
		
		<!-- 图片处理 -->
		<!-- <dependency>
			<groupId>net.coobird</groupId>
			<artifactId>thumbnailator</artifactId>
			<version>0.4.8</version>
		</dependency>  
		-->
		
		
		<!-- Token -->
		
		<!-- <dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>${jwt.version}</version>
		</dependency>
		
		-->
		
		
		<!-- ======================================================== -->
		
	</dependencies>
	
	<build>
		<finalName>${project.artifactId}-${project.version}</finalName>	<!-- build目标文件的文件名，默认情况下为${artifactId}-${version} -->
		<defaultGoal>compile</defaultGoal>	<!-- 执行build任务时，如果没有指定目标，将使用的默认值 ，如：在命令行中执行mvn，则相当于执行mvn compile； -->

		<!-- <pluginManagement>  --> <!-- 父类工程使用，单一工程不需要配置 -->

			<!-- 官方文档：https://maven.apache.org/plugins/ -->
			<!-- 查看maven插件信息，如： mvn help:describe -Dplugin=org.apache.maven.plugins:maven-compiler-plugin:3.6.0 -->
		
			<!-- maven工具，指定编译环境 -->
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.6.0</version>
					<configuration>
						<!-- 一般而言，target与source是保持一致的，但是，有时候为了让程序能在其他版本的jdk中运行(对于低版本目标jdk，源代码中需要没有使用低版本jdk中不支持的语法)，会存在target不同于source的情况 -->
						<source>${jdk.version}</source><!-- 源代码使用的开发版本 -->
						<target>${jdk.version}</target><!-- 需要生成的目标class文件的编译版本 -->

						<encoding>${project.build.encoding}</encoding>

						<!-- 可选项 -->
						<meminitial>128m</meminitial>
						<maxmem>512m</maxmem>
						<fork>true</fork>	<!-- fork is enable,用于明确表示编译版本配置的可用 -->
						<skip>true</skip>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.tomcat.maven</groupId>
					<artifactId>tomcat7-maven-plugin</artifactId>
					<version>2.2</version>
					<!-- Config: contextPath and Port (Default - /HelloSpringMVC : 8080) -->
					<configuration>
						<path>/</path>
						<port>8899</port>
					</configuration>
				</plugin>

				<!-- 跳过测试 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.19</version>
					<configuration>

						<!-- -DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target/test-classes下。 -->
						<!-- -Dmaven.test.skip=true，不执行测试用例，也不编译测试用例类。 -->
						<skipTests>true</skipTests>
						<skip>true</skip>
					</configuration>
				</plugin>

				<!-- war打包插件, 设定war包名称不带版本号 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>3.0.0</version>
					<configuration>
						<warName>${project.artifactId}</warName>
					</configuration>
				</plugin>

				<!-- 资源文件拷贝 -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.0</version>
					<configuration>
						<encoding>${project.build.encoding}</encoding>
					</configuration>
				</plugin>
				
				<plugin>
					<groupId>org.apache.felix</groupId>
					<artifactId>maven-bundle-plugin</artifactId><!-- 为了支持bundle的插件 -->
					<extensions>true</extensions>
				</plugin>
			</plugins>
		<!-- </pluginManagement> -->
		
		<resources>  
            <resource>  
                <directory>src/main/java</directory>  
                <includes>  
                    <include>**/*.properties</include>  
                    <include>**/*.xml</include>  
                </includes>  
                <!-- 是否替换资源中的属性-->  
                <filtering>false</filtering>  
            </resource>  
            <resource>  
                <directory>src/main/resources</directory>  
                <!--  
                    <includes> <include>**/*.properties</include>  
                    <include>**/*.xml</include> </includes> <filtering>true</filtering>  
                -->  
            </resource>  
		</resources> 
		

	</build>
	
</project>
